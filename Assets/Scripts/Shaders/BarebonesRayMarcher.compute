#pragma kernel CSMain
#include "Basics.compute"

float3 light;

RWTexture2D<float4> result;

//from http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/
float mandelbulb(float3 p) {
    //somewhat arbitrary, just make sure it's a int > 1
    int power = 8;
    float3 z = p;
    float dr = 1.0;
    float r = 0.0;

    for (int i = 0; i < 15; i++) {
        r = length(z);

        if (r > 5) {
            break;
        }

        // convert to polar coordinates
        float theta = acos(z.z / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, power - 1.0) * power * dr + 1.0;

        // scale and rotate the point
        float zr = pow(r, power);
        theta = theta * power;
        phi = phi * power;

        // convert back to cartesian coordinates
        z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
        z += p;
    }
    return 0.5 * log(r) * r / dr;
}

float distToScene(float3 p) {

    return mandelbulb(p / 2);
}

float3 albedoAtPoint(float3 p) {
    if (distToScene(p) < surfDistance) {
        return float3(1,1,1);
    }

    return float3(0, 0, 0);
}

float rayMarch(float3 startPos, float3 dir) {
    float d = 0;

    for (int i = 0; i < maxMarchingSteps; i++) {
        float3 p = startPos + d * dir;
        float dist = distToScene(p);
        d += dist;
        if (d > maxMarchingDistance || dist < surfDistance) {
            break;
        }
    }

    return d;
}

float3 getNormal(float3 p) {
    float2 e = float2(0.01, 0);
    float d = distToScene(p);
    float3 n = float3(d - distToScene(p - e.xyy), d - distToScene(p - e.yxy), d - distToScene(p - e.yyx));
    return normalize(n);
}

float getLighting(float3 p) {
    float3 l;
    l = normalize(light - p);

    float3 n = getNormal(p);
    float dif = dot(n, l);
    float d = rayMarch(p + surfDistance * 2 * n, l);

    if (d < length(light - p)) {
        dif *= 0.1;
    }

    return dif;
}

[numthreads(8, 4, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    // Get the dimensions of the RenderTexture
    uint width, height;
    result.GetDimensions(width, height);

    float3 cameraPos = mul(cameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 rayDir = CreateCameraRay(float2((id.xy) / float2(width, height) * 2.0f - 1.0f));

    float dist = rayMarch(cameraPos, rayDir);
    float3 endPoint = cameraPos + dist * rayDir;

    result[id.xy] = float4(albedoAtPoint(endPoint) * getLighting(endPoint), 1);
}

