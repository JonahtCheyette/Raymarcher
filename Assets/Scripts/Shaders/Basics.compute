static const int maxMarchingSteps = 150;
static const float maxMarchingDistance = 100;
static const float surfDistance = 0.01;

float4x4 cameraInverseProjection;
float4x4 cameraToWorld;

struct shape {
    int shapeType;
    //normal in the case of the plane
    float3 position;
    float4 rotation;
    float3 shapeInfo;
    float3 albedo;
};

//an int to tell what shape it is
//a float3 for center/ normal in the case of planes
//a float4 for rotation
//a float3 for albedo
//a float3 to hold shape information

float3 rotatePoint(float3 p, float4 q) {
    //rotating a point by a quaternion
    //assuming quaterinions are in the forem x, y, z, w
    return cross(cross(q.xyz, p) + q.w * p, -q.xyz) + dot(q.xyz, p) * q.xyz + q.w * (cross(q.xyz, p) + q.w * p);
}

float sdSphere(float3 p, float3 center, float radius) {
    return length(p - center) - radius;
}

float sdBox(float3 p, float4 rotation, float3 center, float3 size) {
    float3 pos = rotatePoint(p - center, float4(-rotation.xyz, rotation.w));
    float3 offset = abs(pos) - size;
    //distance from point outside box to edge (0 if inside box)
    //max/min operation on vector dpes it component by component
    float unsignedDst = length(max(offset, 0));
    //-dst from point inside box to edge (0 if outside box)
    float dstInsideBox = max(max(min(offset.x, 0), min(offset.y, 0)), min(offset.z, 0));
    return unsignedDst + dstInsideBox;
}

float sdTorus(float3 p, float4 rotation, float3 center, float2 size) {
    float3 pos = rotatePoint(p - center, float4(-rotation.xyz, rotation.w));
    float2 q = float2(length(pos.xz) - size.x, pos.y);
    return length(q) - size.y;
}

float sdPlane(float3 p, float3 n, float d) {
    return dot(p, n) - d;
}

float sdCylinder(float3 p, float4 rotation, float3 center, float2 size) {
    float3 pos = rotatePoint(p - center, float4(-rotation.xyz, rotation.w));
    float2 d = abs(float2(length(pos.xz), pos.y)) - size;
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float sdCapsule(float3 p, float4 rotation, float3 center, float2 size) {
    float3 pos = rotatePoint(p - center, float4(-rotation.xyz, rotation.w));
    pos.y -= clamp(pos.y, 0, size.x);
    return length(pos) - size.y;
}

float sdShape(float3 p, shape s) {
    if (s.shapeType == 0) {
        //box
        return sdBox(p, s.rotation, s.position, s.shapeInfo);
    } else if (s.shapeType == 1) {
        //sphere
        return sdSphere(p, s.position, s.shapeInfo.x);
    } else if (s.shapeType == 2) {
        //plane
        return sdPlane(p, s.position, s.shapeInfo.x);
    } else if (s.shapeType == 3) {
        //torus
        return sdTorus(p, s.rotation, s.position, s.shapeInfo.xy);
    } else if (s.shapeType == 4) {
        //cylinder
        return sdCylinder(p, s.rotation, s.position, s.shapeInfo.xy);
    } else if (s.shapeType == 5) {
        //capsule
        return sdCapsule(p, s.rotation, s.position, s.shapeInfo.xy);
    }

    return maxMarchingDistance;
}

float3 CreateCameraRay(float2 uv) {
    // Invert the perspective projection of the view-space position
    //gets rid of the projection that the camera does.
    float3 direction = mul(cameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    //takes a direction shooting out from the camera and transforms it into a direction in world space
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return direction;
}

float smin(float a, float b, float k) {
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0, 1);
    return b * (1 - h) + a * h - k * h * (1 - h);
}

float3 blendColor(float a, float b, float3 colA, float3 colB, float k) {
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0, 1);
    float3 blendCol = lerp(colB, colA, h);
    return blendCol;
}