static const int maxMarchingSteps = 150;
static const float maxMarchingDistance = 100;
static const float surfDistance = 0.01;

float4x4 cameraInverseProjection;
float4x4 cameraToWorld;

struct box {
    float3 center;
    float3 size;
    //gotta love quaternions
    float4 rotation;
    float3 color;
};

struct sphere {
    float3 center;
    float radius;
    float3 color;
};

struct torus {
    float3 center;
    //size of the big cirlce & size of the smaller circle
    float2 torusDimensions;
    //gotta love quaternions
    float4 rotation;
    float3 color;
};

struct plane {
    //distance along the axis specified, think of it as the plane's center
    float distAlongNormal;
    float3 surfaceNormal;
    float3 color;
};

struct cylinder {
    float3 center;
    float height;
    float radius;
    //gotta love quaternions
    float4 rotation;
    float3 color;
};

float3 rotatePoint(float3 p, float4 q) {
    //rotating a point by a quaternion
    //assuming quaterinions are in the forem x, y, z, w
    return cross(cross(q.xyz, p) + q.w * p, -q.xyz) + dot(q.xyz, p) * q.xyz + q.w * (cross(q.xyz, p) + q.w * p);
}

float sdSphere(float3 p, sphere s) {
    return length(p - s.center) - s.radius;
}

float sdBox(float3 p, box b) {
    float3 pos = rotatePoint(p - b.center, float4(-b.rotation.xyz, b.rotation.w));
    float3 offset = abs(pos) - b.size;
    //distance from point outside box to edge (0 if inside box)
    //max/min operation on vector dpes it component by component
    float unsignedDst = length(max(offset, 0));
    //-dst from point inside box to edge (0 if outside box)
    float dstInsideBox = max(max(min(offset.x, 0), min(offset.y, 0)), min(offset.z, 0));
    return unsignedDst + dstInsideBox;
}

float sdTorus(float3 p, torus t) {
    float3 pos = rotatePoint(p - t.center, float4(-t.rotation.xyz, t.rotation.w));
    float2 q = float2(length(pos.xz) - t.torusDimensions.x, pos.y);
    return length(q) - t.torusDimensions.y;
}

float sdPlane(float3 p, plane pl) {
    return dot(p, pl.surfaceNormal) - pl.distAlongNormal;
}

float sdCylinder(float3 p, cylinder c) {
    float3 pos = rotatePoint(p - c.center, float4(-c.rotation.xyz, c.rotation.w));
    float2 d = abs(float2(length(pos.xz), pos.y)) - float2(c.radius, c.height);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float3 CreateCameraRay(float2 uv) {
    // Invert the perspective projection of the view-space position
    //gets rid of the projection that the camera does.
    float3 direction = mul(cameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    //takes a direction shooting out from the camera and transforms it into a direction in world space
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return direction;
}

float smin(float a, float b, float k) {
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0, 1);
    return b * (1 - h) + a * h - k * h * (1 - h);
}

float3 blendColor(float a, float b, float3 colA, float3 colB, float k) {
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0, 1);
    float3 blendCol = lerp(colB, colA, h);
    return blendCol;
}