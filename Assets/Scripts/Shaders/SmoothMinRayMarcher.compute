#pragma kernel CSMain
#include "Basics.compute"

float smoothing;

float3 light;

RWTexture2D<float4> result;
StructuredBuffer<shape> shapes;

float distToScene(float3 p) {
    float distance = 3.402823466e+38F;

    for (uint i = 0; i < numShapes; i++) {
        float shapeDistance = sdShape(p, shapes[i]);

        distance = smin(distance, shapeDistance, smoothing);
    }

    return distance;
}

float rayMarch(float3 startPos, float3 dir) {
    float d = 0;

    for (int i = 0; i < maxMarchingSteps; i++) {
        float3 p = startPos + d * dir;
        float dist = distToScene(p);
        d += dist;
        if (d > maxMarchingDistance || dist < surfDistance) {
            break;
        }
    }

    return d;
}

float3 getNormal(float3 p) {
    float2 e = float2(0.01, 0);
    float d = distToScene(p);
    float3 n = float3(d - distToScene(p - e.xyy), d - distToScene(p - e.yxy), d - distToScene(p - e.yyx));
    return normalize(n);
}

float getLighting(float3 p) {
    float3 l;
    l = lightIsPoint ? normalize(light - p) : -light;

    float3 n = getNormal(p);
    float dif = dot(n, l);
    float d = rayMarch(p + surfDistance * 2 * n, l);
    
    if (d < length(light - p)) {
        dif *= 0.1;
    }

    return dif;
}

float3 getCol(float3 p) {
    float distance = 3.402823466e+38F;
    float3 col = 1;

    for (uint i = 0; i < numShapes; i++) {
        float shapeDistance = sdShape(p, shapes[i]);

        col = blendColor(distance, shapeDistance, col, shapes[i].albedo, smoothing);
        distance = min(distance, shapeDistance);
    }

    return col * (distance < 3.402823462e+38F);
}

[numthreads(8, 4, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    // Get the dimensions of the RenderTexture
    uint width, height;
    result.GetDimensions(width, height);

    float3 cameraPos = mul(cameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 rayDir = CreateCameraRay(float2((id.xy) / float2(width, height) * 2.0f - 1.0f));

    float dist = rayMarch(cameraPos, rayDir);
    float3 endPoint = cameraPos + dist * rayDir;
    
    result[id.xy] = float4(getLighting(endPoint) * getCol(endPoint), 1);
}
